(()=>{"use strict";class e{constructor(e){this.title=e,this.list=[]}add(e){this.list.push(e)}}let t=[];function o(e){localStorage.removeItem(`project${e}`),localStorage.removeItem(`project${e}Tasks`),console.log("ls")}const c=function(){document.querySelector(".customProjForm").classList.remove("active"),document.querySelector(".projectName").value=""};!function(){!function(){let o=localStorage.length;if(o>0)for(let c=0;c<=o/2;c++)if(localStorage.getItem(`project${c}`)){let o=localStorage.getItem(`project${c}`),r=JSON.parse(localStorage.getItem(`project${c}Tasks`)),n=new e(o);r.length>0&&r.forEach((e=>{n.add(e)})),t.push(n)}}();const c=document.querySelector(".customProjList"),r=document.querySelector(".customProjForm");for(let n=0;n<t.length;n++)if(null!==localStorage.getItem(`project${n}`)){const l=document.createElement("div"),s=document.createElement("button");let a=localStorage.getItem(`project${n}`);l.classList.add("customProj"),l.setAttribute("data-project",`${n}`),l.textContent=a,new e(a),console.log(t),s.setAttribute("data-btn",`${n}`),s.textContent="X",l.appendChild(s),s.addEventListener("click",(()=>{l.remove(),o(n),t.splice(n,1)})),c.insertBefore(l,r)}else console.log("null")}(),console.log(t),function(e,t,o){const c=document.querySelector(".addTask"),r=document.querySelector(".closeBtn"),n=document.querySelector(".taskForm");c.addEventListener("click",(()=>{n.classList.add("active")})),r.addEventListener("click",(()=>{n.classList.remove("active")}))}(),function(){const r=document.querySelector(".customProjBtn"),n=document.querySelector("button.close"),l=document.querySelector("button.add");r.addEventListener("click",(()=>{document.querySelector(".customProjForm").classList.add("active")})),n.addEventListener("click",(()=>{c()})),l.addEventListener("click",(()=>{(function(c,r){const n=document.querySelector(".customProjList"),l=document.querySelector(".customProjForm"),s=document.createElement("div"),a=document.createElement("button");s.classList.add("customProj"),s.setAttribute("data-project",`${c}`),s.textContent=r;const u=new e(r);t.push(u),function(e){if(e.length>0)for(let t=0;t<=e.length-1;t++)localStorage.setItem(`project${t}`,e[t].title),localStorage.setItem(`project${t}Tasks`,JSON.stringify(e[t].list))}(t),console.log(t),a.setAttribute("data-btn",`${c}`),a.textContent="X",s.appendChild(a),a.addEventListener("click",(()=>{s.remove(),o(c),t.splice(c,1)})),n.insertBefore(s,l)})(document.querySelectorAll("[data-project]").length,document.querySelector(".projectName").value),c()}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,