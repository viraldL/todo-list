(()=>{"use strict";class e{constructor(e){this.title=e,this.list=[]}add(e){this.list.push(e)}}let t=[];const c=function(){document.querySelector(".customProjForm").classList.remove("active"),document.querySelector(".projectName").value=""};!function(e,t,c){const o=document.querySelector(".addTask"),r=document.querySelector(".closeBtn"),n=document.querySelector(".taskForm");o.addEventListener("click",(()=>{n.classList.add("active")})),r.addEventListener("click",(()=>{n.classList.remove("active")}))}(),function(){const o=document.querySelector(".customProjBtn"),r=document.querySelector("button.close"),n=document.querySelector("button.add");o.addEventListener("click",(()=>{document.querySelector(".customProjForm").classList.add("active")})),r.addEventListener("click",(()=>{c()})),n.addEventListener("click",(()=>{(function(c){const o=document.querySelectorAll("[data-project]").length,r=document.querySelector(".customProjList"),n=document.querySelector(".customProjForm"),s=document.createElement("div"),u=document.createElement("button");s.classList.add("customProj"),s.setAttribute("data-project",`${o}`),s.textContent=c;const d=new e(c);t.push(d),console.log(t),u.setAttribute("data-btn",`${o}`),u.textContent="X",s.appendChild(u),u.addEventListener("click",(()=>{s.remove();let e=document.querySelectorAll("[data-project]");for(let t=0;t<e.length;t++)e[t].setAttribute("data-project",t)})),r.insertBefore(s,n)})(document.querySelector(".projectName").value),c()}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,